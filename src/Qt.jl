
#-----------------------------------------------------------------------

module Qt

export Qbit, ‚äó, œÜ0, œÜ1, œÜx, œÜy, randstate, apply, proba, kron, merge, *
export id, œÉ‚Çì, œÉ·µß, œÉùëß, R‚Çì, R·µß, Rùëß, c‚Çì, c·µß, cùëß, cc‚Çì, S, T, swap, cswap
export hadamard, ising, bellstate, invbell
export rotation‚Çì, rotation·µß, rotationùëß, states

#-----------------------------------------------------------------------

import Base.*

const œÜ0 = [1.,0.] .+ 0im
const œÜ1 = [0.,1.] .+ 0im
const œÜx = (œÜ0 + im*œÜ1) / ‚àö2
const œÜy = (œÜ0 + im*œÜ1) / ‚àö2
const ‚äó = kron

randstate(nb_qbit) = im .* rand(2^nb_qbit)

mutable struct Qbit
    state::Vector{ComplexF64}
    n::Int64
    Qbit() = new(œÜ0,1)
    Qbit(args::Vararg{Any,N}) where {N} = [Qbit.(args)...]
    Qbit(q::Qbit) = q
    Qbit(v::Vector{Qbit}) = merge(v)
    Qbit(œÜ::Vector) = new(ComplexF64.(œÜ), length(œÜ) |> log2)
end

#-----------------------------------------------------------------------

states(n) = @inbounds [ComplexF64.(BitArray(v==x for v‚àà1:n)) for x‚àà1:n]

proba(q::Qbit) = @inbounds [(q.state'state)^2 for state ‚àà states(length(q.state))]

apply(v::Vector{Qbit}, m::Matrix{T}) where T = vcat([q for q ‚àà v]) .* Ref(m)

Base.kron(q::Qbit,m::Matrix{T}) where T = kron(q.state,m)

Base.kron(q::Qbit,q1::Qbit) = q.state ‚äó q1.state

Base.kron(v::Vector{Qbit}) = @inbounds ‚äó([q.state for q in v]...)

Base.merge(v::Vector{Qbit}) = Qbit(‚äó(v))

*(v::Vector{Qbit}, m::Matrix{T}) where T = Qbit.(m * ‚äó(v))

function *(q::Qbit,m::Matrix{T}) where T  q.state = m * q.state ; q end

#-----------------------------------------------------------------------

const id =  [1 0
             0 1]

const œÉ‚Çì =  [0 1
             1 0]

const œÉ·µß=im*[0 -1
             1  0]

const œÉùëß =  [1  0
             0 -1]

const S = [1  0
           0 im]

const T = ‚àöS        #[1 0
                    # 0 ‚ÑØ^(im*(œÄ/4))]
const hadamard = (1 / ‚àö2) * [1  1
                             1 -1]

const R‚Çì = [cos(1/2) -sin(1/2)im
           -sin(1/2)im  cos(1/2)]

const R·µß = [cos(1/2) -sin(1/2)
            sin(1/2)  cos(1/2)]

const Rùëß = [‚ÑØ^(1/2im) 0
            0 ‚ÑØ^(1/2im)]

const c‚Çì =  [1 0 0 0
             0 1 0 0
             0 0 0 1
             0 0 1 0]

const c·µß =  [1 0 0   0
             0 1 0   0
             0 0 0 -im
             0 0 im  0]

const cùëß =  [1 0 0  0
             0 1 0  0
             0 0 1  0
             0 0 0 -1]

const swap = [1 0 0 0
              0 0 1 0
              0 1 0 0
              0 0 0 1]

const ising = [cos(1) 0 0 -im*sin(1)
              0 cos(1)  -sin(1)im 0
              0 -sin(1)im  cos(1) 0
              -sin(1)im  0 0 cos(1)]

const cc‚Çì =  [1 0 0 0 0 0 0 0
              0 1 0 0 0 0 0 0
              0 0 1 0 0 0 0 0
              0 0 0 1 0 0 0 0
              0 0 0 0 1 0 0 0
              0 0 0 0 0 1 0 0
              0 0 0 0 0 0 0 1
              0 0 0 0 0 0 1 0]

const cswap = [1 0 0 0 0 0 0 0
               0 1 0 0 0 0 0 0
               0 0 1 0 0 0 0 0
               0 0 0 1 0 0 0 0
               0 0 0 0 1 0 0 0
               0 0 0 0 0 0 1 0
               0 0 0 0 0 1 0 0
               0 0 0 0 0 0 0 1]

const bellstate = c‚Çì * (hadamard ‚äó id)

const invbell = (hadamard ‚äó id) * c‚Çì

rotation‚Çì(Œ∏) = [cos(Œ∏/2) -sin(Œ∏/2)im
               -sin(Œ∏/2)im  cos(Œ∏/2)]

rotation·µß(Œ∏) = [cos(Œ∏/2) -sin(Œ∏/2)
                sin(Œ∏/2)  cos(Œ∏/2)]

rotationùëß(Œ∏) = [‚ÑØ^(Œ∏/2im) 0
                0 ‚ÑØ^(Œ∏/2im)]

#-----------------------------------------------------------------------

end
